# Generated by Django 4.2.5 on 2023-10-18 14:50

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('courses_api', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateField()),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('registration_number', models.CharField(max_length=15, unique=True)),
                ('phone_number', models.CharField(max_length=50, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to='')),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('student', 'Student'), ('school_elder', 'School Elder'), ('lecturer', 'Lecturer')], max_length=15)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notoriety', models.IntegerField(default=0)),
                ('is_mentor', models.BooleanField(default=False)),
                ('mentoring_number', models.IntegerField(default=0)),
                ('number_followers', models.IntegerField(default=0)),
                ('title', models.CharField(choices=[('PhD', 'PhD'), ('Pr', 'Professor')], max_length=5)),
                ('bachelor_graduate_since', models.DateField()),
                ('master_graduate_since', models.DateField()),
                ('phd_graduate_since', models.DateField()),
                ('field_of_research', models.CharField(max_length=255)),
                ('biography', models.TextField(blank=True, null=True)),
                ('followers', models.ManyToManyField(related_name='lecturer_followers', to=settings.AUTH_USER_MODEL)),
                ('lectures', models.ManyToManyField(related_name='lectures', to='courses_api.courseofstudy')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lecturer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lecturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users_api.lecturer')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='academic_mentor', to='users_api.mentor')),
                ('courses_attending', models.ManyToManyField(related_name='student_courses', to='courses_api.courseofstudy')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolElder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notoriety', models.IntegerField(default=0)),
                ('number_followers', models.IntegerField(default=0)),
                ('bachelor_graduate_since', models.DateField()),
                ('master_graduate_since', models.DateField(blank=True, null=True)),
                ('is_mentor', models.BooleanField(default=False)),
                ('courses_attending', models.ManyToManyField(related_name='school_elders_courses', to='courses_api.courseofstudy')),
                ('followers', models.ManyToManyField(related_name='school_elder_followers', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='school_elder', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='mentor',
            name='school_elder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users_api.schoolelder'),
        ),
        migrations.AddField(
            model_name='mentor',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users_api.student'),
        ),
    ]
